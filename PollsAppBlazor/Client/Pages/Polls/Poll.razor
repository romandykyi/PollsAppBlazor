@page "/polls/{pollId:int}"
@using Microsoft.AspNetCore.Authorization
@using PollsAppBlazor.Shared.Polls
@inject PublicClient PublicClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@attribute [Authorize]

<style>
	.createdDate, .creator {
		font-size: 16px;
		color: #808080;
	}

	.creator {
		margin-bottom: 10px;
	}

	.description {
		margin-top: 5px;
		font-size: 20px;
	}
</style>

@if (poll == null)
{
	<p>
		Loading...
	</p>
}
else
{
	<h2>@poll.Title</h2>
	<div class="createdDate">Created @poll.CreationDate.AsTimeAgo()</div>
	<div class="creator">by @poll.Creator</div>

	@if (poll.CurrentUserCanEdit)
	{
		<MudStack Row="true" Spacing="1">
			<MudButton Variant="Variant.Outlined" Color="Color.Primary"
					   StartIcon="@Icons.Material.Filled.Edit"
					   Href="@($"polls/{pollId}/edit")">
				Edit
			</MudButton>
			<MudButton Variant="Variant.Outlined" Color="Color.Error"
					   StartIcon="@Icons.Material.Filled.Delete"
					   OnClick="Delete">
				Delete
			</MudButton>
		</MudStack>
	}

	@if (!string.IsNullOrEmpty(poll.Description))
	{
		<div class="description">
			@poll.Description
		</div>
	}

	<MudRadioGroup @bind-SelectedOption="@selectedOptionId"
				   ReadOnly="@hasUserVoted">
		@foreach (var option in poll.Options)
		{
			<MudRadio Option="@((int?)option.Id)" Class="d-block"
					  Color="@Color.Primary">
				@option.Description
			</MudRadio>
		}
	</MudRadioGroup>
	<MudButton OnClick="Vote" Disabled="@(hasUserVoted || selectedOptionId == null)"
			   Color="Color.Success" Variant="Variant.Filled">
		Vote
	</MudButton>
}

@code {
	private PollViewDto poll { get; set; } = null!;

	private int? selectedOptionId { get; set; }
	private bool hasUserVoted => poll.VotedOptionId != null;

	[Parameter]
	public int pollId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			poll = (await PublicClient.Client.GetFromJsonAsync<PollViewDto>($"/api/polls/{pollId}"))!;
			selectedOptionId = poll.VotedOptionId;
		}
		catch (HttpRequestException e)
		{
			switch (e.StatusCode)
			{
				case HttpStatusCode.NotFound:
					NavigationManager.NavigateTo("/polls/error404");
					break;
				default:
					Snackbar.UnexpectedError();
					break;
			}
		}
	}

	private async void Delete()
	{
		var parameters = new DialogParameters<DialogTemplate>();
		parameters.Add(x => x.ContentText, $"Are you sure you want to Delete poll \"{poll.Title}\"?");
		parameters.Add(x => x.Color, Color.Error);

		DialogOptions options = new() { Position = DialogPosition.TopCenter };

		var dialog = await DialogService.ShowAsync<DialogTemplate>("Confirm Delete", parameters, options);
		var result = await dialog.Result;

		if (result.Canceled) return;

		var response = await PublicClient.Client.DeleteAsync($"api/polls/{pollId}");
		try
		{
			response.EnsureSuccessStatusCode();

			NavigationManager.NavigateTo("/polls");
			Snackbar.Add("Poll was successfully deleted", Severity.Success);
		}
		catch (HttpRequestException)
		{
			Snackbar.UnexpectedError();
		}
	}

	private async void Vote()
	{
		// Make sure that user has selected option
		if (selectedOptionId == null) return;

		try
		{
			var response = await PublicClient.Client.PostAsync($"api/options/{selectedOptionId}/vote", null);
			response.EnsureSuccessStatusCode();
			Snackbar.Add("Your vote was saved", Severity.Success);

			poll.VotedOptionId = selectedOptionId; // Update selected option client-side
			StateHasChanged();
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.Forbidden)
		{
			Snackbar.Add("You have already voted!", Severity.Warning,
				options => options.CloseAfterNavigation = true);
		}
		catch (HttpRequestException)
		{
			Snackbar.UnexpectedError();
		}
	}
}
