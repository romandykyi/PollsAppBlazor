@page "/users/reset-password"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using PollsAppBlazor.Shared.Users
@inject ISnackbar Snackbar
@inject PublicClient PublicClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LocalStorageUtils LocalStorage

<AuthorizeView>
	<Authorized>
		<h3>Reset Password</h3>
		<p>
			You are already logged in!
		</p>
	</Authorized>
	<NotAuthorized>
		<MudPaper Class="pa-4">
			<h3>Reset Password</h3>
			<ErrorsList Errors="@serverErrors" />
			<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
				<MudTextField T="string" Label="New password" @ref="passwordField" @bind-Value="newPassword"
							  InputType="InputType.Password"
							  Validation="@(new Func<string, IEnumerable<string>>(PasswordValidator.StrengthValidation))"
							  Required="true" RequiredError="Password is required!" />
				<MudTextField T="string" Label="Confirm new password"
							  HelperText="Repeat the password" InputType="InputType.Password"
							  Validation="@(new Func<string, string?>(PasswordMatchValidation))" />
			</MudForm>
			<div class="d-flex">
				<MudButton Variant="Variant.Filled" Color="Color.Primary"
						   Disabled="@(!success)" Class="mr-auto" OnClick="Confirm">
					Reset
				</MudButton>
			</div>
		</MudPaper>
	</NotAuthorized>
</AuthorizeView>

@code {
	private bool success { get; set; } = false;
	private string[] errors = [];

	private MudForm form = null!;
	private MudTextField<string> passwordField = null!;
	private string[]? serverErrors { get; set; }

	[SupplyParameterFromQuery(Name = "userId")]
	private string? userId { get; set; }
	[SupplyParameterFromQuery(Name = "token")]
	private string? token { get; set; }

	private string newPassword { get; set; } = "";

	protected override void OnParametersSet()
	{
		if (string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(token))
		{
			NavigationManager.NavigateTo("/forgot-password");
		}
	}

	private async Task Confirm()
	{
		await form.Validate();
		if (!form.IsValid) return;

		if (string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(token))
		{
			NavigationManager.NavigateTo("/users/login");
			return;
		}

		ResetPasswordDto dto = new()
		{
			Token = token,
			UserId = userId,
			NewPassword = newPassword
		};
		var response = await PublicClient.Client.PostAsJsonAsync("/api/auth/reset-password", dto);
		try
		{
			response.EnsureSuccessStatusCode();

			Snackbar.Add("Password was successfully changed. Now you can log in.", Severity.Success);
			NavigationManager.NavigateTo("/users/login");
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.Unauthorized)
		{
			serverErrors = ["Invalid reset password attempt, please try again"];
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.BadRequest)
		{
			serverErrors = await response.Content.ExtractErrorsAsync().ToArrayAsync();
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.TooManyRequests)
		{
			Snackbar.TooManyRequestsError();
		}
		catch (HttpRequestException)
		{
			serverErrors = new[] { "An unexpected error has occured" };
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity != null && user.Identity.IsAuthenticated)
		{
			// Redirect to home if already logged in
			NavigationManager.NavigateTo("/");
		}
	}

	private string? PasswordMatchValidation(string arg)
	{
		if (passwordField.Value != arg)
			return "Passwords don't match";
		return null;
	}
}
