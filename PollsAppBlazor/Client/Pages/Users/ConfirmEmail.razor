@page "/users/confirm-email"
@inject NavigationManager Navigation
@inject PublicClient PublicClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject LocalStorageUtils LocalStorage

@if (_isProcessing)
{
    <MudText>
        Confirming your email...
    </MudText>
}
else
{
    <MudText>
        Couldn't confirm your email. Please try again.
    </MudText>
}

@code {
    private bool _isProcessing = true;

    [SupplyParameterFromQuery(Name = "userId")]
    private string? userId { get; set; }

    [SupplyParameterFromQuery(Name = "token")]
    private string? token { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Redirect to home if already logged in
            Navigation.NavigateTo("/");
        }

        if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(token))
        {
            _isProcessing = false;
            return;
        }

        var response = await PublicClient.Client.PostAsync($"/api/auth/confirm-email?userId={Uri.EscapeDataString(userId)}&token={Uri.EscapeDataString(token)}", null);
        try
        {
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/users/login");
            Snackbar.Add("Your email has been confirmed. You can now log in.", Severity.Success);

            await LocalStorage.RemoveSessionAsync("emailToConfirm");
        }
        catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.TooManyRequests)
        {
            _isProcessing = false;
            Snackbar.TooManyRequestsError();
        }
        catch (HttpRequestException)
        {
            _isProcessing = false;
        }
    }
}
