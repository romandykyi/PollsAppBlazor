@page "/users/forgot-password"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using PollsAppBlazor.Shared.Users
@inject ISnackbar Snackbar
@inject PublicClient PublicClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LocalStorageUtils LocalStorage
@inject LocalStorageUtils LocalStorage

<AuthorizeView>
	<Authorized>
		<h3>Forgot Password</h3>
		<p>
			You are already logged in!
		</p>
	</Authorized>
	<NotAuthorized>
		@if (!emailSent)
		{
			<MudPaper Class="pa-4">
				<h3>Forgot Password</h3>
				<MudText>
					Enter your email or username and we will send you the password reset link by email.
				</MudText>
				<ErrorsList Errors="@serverErrors" />
				<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
					<MudTextField T="string" Label="Email or Username"
								  @bind-Value="email"
								  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
								  Required="true" RequiredError="This field is required!" />
				</MudForm>
				<div class="d-flex mt-2">
					<MudButton Variant="Variant.Filled" Color="Color.Primary"
							   Disabled="@(!success)" Class="mr-auto" OnClick="Confirm">
						Confirm
					</MudButton>
				</div>
			</MudPaper>
		}
		else
		{
			<h3>Forgot Password</h3>
			<MudText>
				If you entered the correct email, the reset password link was sent. Check your inbox.
			</MudText>
			<div class="d-flex mt-2">
				<MudButton Variant="Variant.Filled" Color="Color.Secondary"
						   OnClick="TryAgain">
					Try again
				</MudButton>
			</div>
		}
	</NotAuthorized>
</AuthorizeView>

@code {
	private bool success { get; set; } = false;
	private string[] errors = [];

	private MudForm form = null!;
	private string[]? serverErrors { get; set; }

	private bool emailSent;

	private string email { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		string? forgotPasswordState = await LocalStorage.GetSessionAsync("forgotPasswordInitiated");
		emailSent = forgotPasswordState == "true";
	}

	private async Task Confirm()
	{
		await form.Validate();
		if (!form.IsValid) return;

		emailSent = true;
		await LocalStorage.SetSessionAsync("forgotPasswordInitiated", "true");

		InitiateResetPasswordDto dto = new()
		{
			Email = email
		};
		var response = await PublicClient.Client.PostAsJsonAsync("/api/auth/initiate-reset-password", dto);
		try
		{
			response.EnsureSuccessStatusCode();
			emailSent = true;
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.BadRequest)
		{
			serverErrors = await response.Content.ExtractErrorsAsync().ToArrayAsync();
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.TooManyRequests)
		{
			Snackbar.TooManyRequestsError();
		}
		catch (HttpRequestException)
		{
			serverErrors = new[] { "An unexpected error has occured" };
		}
	}

	private async Task TryAgain()
	{
		await LocalStorage.RemoveAsync("forgotPasswordInitiated");
		emailSent = false;
	}
}
