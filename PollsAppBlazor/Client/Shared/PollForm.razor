@using PollsAppBlazor.Shared.Polls
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<EditForm Model="@Poll" OnValidSubmit="OnValidSubmit" style="max-width: 640px">
	<DataAnnotationsValidator />
	<MudTextField @bind-Value="Poll.Title" For="@(() => Poll.Title)"
				  Label="Title" MaxLength="@PollCreationDto.TitleMaxSize" />
	<MudTextField @bind-Value="Poll.Description" For="@(() => Poll.Description)"
				  Label="Description" MaxLength="@PollCreationDto.DescriptionMaxSize"
				  HelperText="Optional description" />

	<MudStack Row="true">
		<MudCheckBox @bind-Checked="hasExpiryDate" Disabled="@(!CanEditOptions)"
					 Label="Has expire date" Color="Color.Primary" />
		<Info Message="The date after which the poll becomes unavailable for new votes, and old votes become visible to everyone" />
	</MudStack>
	<MudStack Row="true">
		<MudCheckBox @bind-Checked="Poll.ResultsVisibleBeforeVoting"
					 For="@(() => Poll.ResultsVisibleBeforeVoting)"
					 Label="Show results before voting" Color="Color.Primary" />
		<Info Message="If checked, everyone can see results of the poll. If unchecked, only users who previously voted can see results, but after poll is expired everyone can see results." />
	</MudStack>

	@if (hasExpiryDate)
	{
		<MudDatePicker @bind-Date="expiryDate" Disabled="@(!CanEditOptions)"
					   Label="Expiry date" Placeholder="Select Date"
					   IsDateDisabledFunc="IsDateInvalid" />
	}

	<MudStack AlignItems="AlignItems.Center" Row="true">
		<MudText Typo="Typo.h4">Options</MudText>
		<MudSpacer />
		@if (CanEditOptions)
		{
			<MudButton Variant="Variant.Filled" Color="Color.Success"
					   Disabled="@(Poll.Options.Count >= PollCreationDto.MaxOptionsCount)"
					   OnClick="AddNewOption" Size="Size.Small"
					   StartIcon="@Icons.Material.Filled.AddCircleOutline">
				Add
			</MudButton>
		}
	</MudStack>
	<ol>
		@for (int i = 0; i < options.Count; i++)
		{
			var option = options[i];
			int index = i; // Prevent bug with delegates scope
			<li>
				<MudStack AlignItems="AlignItems.End" Row="true" Spacing="1">
					<MudTextField @bind-Value="option.Description" For="@(() => option.Description)"
								  ReadOnly="@(!CanEditOptions)" />
					@if (CanEditOptions)
					{
						<MudButtonGroup OverrideStyles="false">
							<MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
										   Color="Color.Secondary" Variant="Variant.Filled"
										   OnClick="@(() => ReplaceOptions(index, index - 1))"
										   Disabled="@(index <= 0)" Size="Size.Small" />
							<MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
										   Color="Color.Secondary" Variant="Variant.Filled"
										   OnClick="@(() => ReplaceOptions(index, index + 1))"
										   Disabled="@(index >= options.Count - 1)" Size="Size.Small" />
							<MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline"
										   Color="Color.Error" Variant="Variant.Filled"
										   Size="Size.Small"
										   Disabled="@(Poll.Options.Count <= PollCreationDto.MinOptionsCount)"
										   OnClick="@(() => RemoveOption(index))" />
						</MudButtonGroup>
					}
				</MudStack>
			</li>
		}
	</ol>
	<MudButtonGroup OverrideStyles="false">
		<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
				   Color="Color.Primary" Class="ml-auto">
			@SubmitButtonText
		</MudButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error"
				   Class="ml-auto" OnClick="@(async () => await OnCancel.InvokeAsync())">
			Cancel
		</MudButton>
	</MudButtonGroup>
</EditForm>

@code {
	private bool hasExpiryDate = false;
	private DateTime? expiryDate = DateTime.Now + TimeSpan.FromDays(1);
	private IList<OptionCreationDto> options = null!;

	[Parameter]
	public PollCreationDto Poll { get; set; } = null!;
	[Parameter]
	public bool CanEditOptions { get; set; }
	[Parameter]
	public string SubmitButtonText { get; set; } = "Submit";

	[Parameter]
	public EventCallback OnSubmit { get; set; }
	[Parameter]
	public EventCallback OnCancel { get; set; }

	protected override void OnInitialized()
	{
		if (Poll == null)
		{
			throw new NullReferenceException("Poll is not set to the form");
		}
		if (Poll.ExpiryDate != null)
		{
			hasExpiryDate = true;
			expiryDate = Poll.ExpiryDate.Value.UtcDateTime;
		}
		// Make sure that options is a list, because we need index access
		if (Poll.Options is IList<OptionCreationDto> optionsList)
		{
			options = optionsList;
		}
		else
		{
			Poll.Options = options = Poll.Options.ToList();
		}
	}

	private async Task OnValidSubmit(EditContext context)
	{
		if (CanEditOptions)
		{
			Poll.ExpiryDate = hasExpiryDate ? expiryDate + TimeSpan.FromHours(1) : null;
		}
		StateHasChanged();

		await OnSubmit.InvokeAsync();
	}

	private void AddNewOption()
	{
		if (options.Count >= PollCreationDto.MaxOptionsCount)
		{
			Snackbar.Add("Limit of options is reached", Severity.Warning, options => options.CloseAfterNavigation = true);
			return;
		}

		options.Add(new() { Description = "Option" });
	}

	private void RemoveOption(int optionIndex)
	{
		if (options.Count <= PollCreationDto.MinOptionsCount)
		{
			Snackbar.Add("Minimum 2 options are required", Severity.Warning, options => options.CloseAfterNavigation = true);
			return;
		}

		options.RemoveAt(optionIndex);
	}

	private void ReplaceOptions(int option1Index, int option2Index)
	{
		(options[option1Index], options[option2Index]) = (options[option2Index], options[option1Index]);
	}

	private bool IsDateInvalid(DateTime date)
	{
		if (!CanEditOptions) return false;

		long timeTicks = (date - DateTime.Now).Ticks;
		return timeTicks < PollCreationDto.MinExpiryDurationTicks ||
						timeTicks > PollCreationDto.MaxExpiryDurationTicks;
	}
}
