@page "/users/register"
<PageTitle>Register - PollsAppBlazor</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using PollsAppBlazor.Shared.Users
@inject ISnackbar Snackbar
@inject PublicClient PublicClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LocalStorageUtils LocalStorage

<AuthorizeView>
	<Authorized>
		<h3>Register</h3>
		<p>
			You are already registered!
		</p>
	</Authorized>
	<NotAuthorized>
		@if (emailToConfirm != null)
		{
			<h3>Email Confirmation</h3>
			<MudText>
				Your account has been created. A confirmation email has been sent to <strong>@emailToConfirm</strong>.
				Please check your inbox and click the link in the email to confirm your email address.
			</MudText>
			<MudText>
                Don't forget to check your spam folder if you don't see the email in your inbox. 
				If you still can't find it, you please contact
				<MudLink Href="/support">support</MudLink> using the email that you have entered.
			</MudText>
			<MudText>
                If you entered the wrong email address, you can 
				<MudLink Href="/users/register?forgetPreviousAttempt=true">register again</MudLink> with the correct one.
			</MudText>
        }
		else
		{
			<MudPaper Class="pa-4">
				<h3>Register</h3>
				<ErrorsList Errors="@serverErrors" />
				<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
					<MudTextField T="string" Label="Username" @bind-Value="user.Username"
								  Validation="@(new Func<string, IEnumerable<string>>(UserNameValidation))"
								  Required="true" RequiredError="Username is required!" />
					<MudTextField T="string" Label="Email" @bind-Value="user.Email"
								  InputType="InputType.Email"
								  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
								  Required="true" RequiredError="Email is required!" />
					<MudTextField T="string" Label="Password" @ref="passwordField" @bind-Value="user.Password"
								  InputType="InputType.Password"
								  Validation="@(new Func<string, IEnumerable<string>>(PasswordValidator.StrengthValidation))"
								  Required="true" RequiredError="Password is required!" />
					<MudTextField T="string" Label="Confirm password"
								  HelperText="Repeat the password" InputType="InputType.Password"
								  Validation="@(new Func<string, string?>(PasswordMatchValidation))" />
					<MudCheckBox T="bool" @bind-Value="acceptTerms">
						I have read and accept the <MudLink Href="/privacy-policy">Privacy Policy</MudLink> and <MudLink Href="/terms-of-service">Terms of Service</MudLink>.
					</MudCheckBox>
				</MudForm>
				<div class="d-flex">
					<MudButton Variant="Variant.Filled" Color="Color.Primary"
							   Disabled="@(!success || !acceptTerms)" OnClick="Submit">
						Register
					</MudButton>
					<MudLink Href="/users/login" Class="ml-auto">I already have an account</MudLink>
				</div>
			</MudPaper>
		}
	</NotAuthorized>
</AuthorizeView>

@code {
	[SupplyParameterFromQuery(Name = "forgetPreviousAttempt")]
	private bool forgetPreviousAttempt { get; set; } = false;

	private string? emailToConfirm = null;

	private string[] errors = { };
	private MudTextField<string> passwordField = null!;
	private MudForm form = null!;

	private bool success { get; set; } = false;
	private bool acceptTerms { get; set; } = false;
	private string[]? serverErrors;

	private UserRegisterDto user = new();

	protected override async Task OnParametersSetAsync()
	{
		if (forgetPreviousAttempt) 
		{
			emailToConfirm = null;
			await LocalStorage.RemoveSessionAsync("emailToConfirm");
		}
		else
		{
            emailToConfirm = await LocalStorage.GetSessionAsync("emailToConfirm");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity != null && user.Identity.IsAuthenticated)
		{
			// Redirect to home if already logged in
			NavigationManager.NavigateTo("/");
		}
	}

	private IEnumerable<string> UserNameValidation(string userName)
	{
		if (string.IsNullOrWhiteSpace(userName))
		{
			yield return "Username is required!";
			yield break;
		}
		if (!Regex.IsMatch(userName, @"^[a-zA-Z]+"))
			yield return "Username must start with letter";
		if (!Regex.IsMatch(userName, @"^[a-zA-Z0-9_]*$"))
			yield return "Username must be alphanumeric, underscores are allowed";
	}

	private string? PasswordMatchValidation(string arg)
	{
		if (passwordField.Value != arg)
			return "Passwords don't match";
		return null;
	}

	private async Task Submit()
	{
		await form.Validate();
		if (!form.IsValid) return;

		HttpResponseMessage response;
		response = await PublicClient.Client.PostAsJsonAsync("/api/auth/register", user);
		try
		{
			response.EnsureSuccessStatusCode();

			emailToConfirm = user.Email;
			await LocalStorage.SetSessionAsync("emailToConfirm", emailToConfirm);
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.BadRequest)
		{
			serverErrors = await response.Content.ExtractErrorsAsync().ToArrayAsync();
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.TooManyRequests)
		{
			Snackbar.TooManyRequestsError();
		}
		catch (HttpRequestException)
		{
			serverErrors = new[] { "An unexpected error has occured" };
		}
	}
}
